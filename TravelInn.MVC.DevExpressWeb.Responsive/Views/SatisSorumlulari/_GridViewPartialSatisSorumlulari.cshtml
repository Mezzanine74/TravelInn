@functions{
    object GetEditing(ASPxGridView grid)
    {
        if (grid.IsNewRowEditing)
            return new TravelInn.Data.ViewModels.SatisSorumlusuViewModel();// Bu model editte gosterilenle ayni olacak
        return grid.GetRow(grid.EditingRowVisibleIndex);
    }
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewSatisSorumlulari";
        settings.CallbackRouteValues = new { Controller = "SatisSorumlulari", Action = "GridViewPartialSatisSorumlulari" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "SatisSorumlulari", Action = "GridViewPartialSatisSorumlulariAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "SatisSorumlulari", Action = "GridViewPartialSatisSorumlulariUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SatisSorumlulari", Action = "GridViewPartialSatisSorumlulariDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;

        settings.ClientSideEvents.RowDblClick = "function(s,e){ onShowLog(s,e) }";
        settings.ClientSideEvents.Init = "function(s, e){ AdjustEnterKeyUpdate(s, e);}";

        settings.CommandColumn.Width = 74;

        settings.Width = System.Web.UI.WebControls.Unit.Pixel(800);

        settings.SetEditFormTemplateContent(c =>
        {
            Html.DevExpress().FormLayout(frmSettings =>
            {
                frmSettings.Name = "SorumluEditForm";
                frmSettings.Width = Unit.Percentage(100);

                frmSettings.Items.AddGroupItem(grp =>
                {
                    grp.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                    grp.ShowCaption = DefaultBoolean.False;

                    // Uyruk
                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Ismi";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Width = Unit.Percentage(100);
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                        });
                    });


                    // Telefon
                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Telefon";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Width = Unit.Percentage(100);
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                        });
                    });

                    // Email
                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Email";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Width = Unit.Percentage(100);
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                        });
                    });

                    // Adres
                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Adres";

                        grpItem.NestedExtension().Memo(tbx =>
                        {
                            tbx.Width = Unit.Percentage(100);
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.ControlStyle.Wrap = DefaultBoolean.True;
                        });
                    });

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.ShowCaption = DefaultBoolean.False;
                    }).SetNestedContent(() =>
                    {
                        ViewContext.Writer.Write("<div style='float:right'>");
                        Html.DevExpress().Button(btnSettings =>
                        {
                            btnSettings.Name = "btnUpdate";
                            btnSettings.Text = "Guncelle";
                            btnSettings.RenderMode = ButtonRenderMode.Link;
                            btnSettings.ClientSideEvents.Click = "function(s, e){ updateGrid(" + settings.Name + "); }";
                        }).Render();
                        Html.DevExpress().Button(btnSettings =>
                        {
                            btnSettings.Name = "btnCancel";
                            btnSettings.Text = "Iptal";
                            btnSettings.RenderMode = ButtonRenderMode.Link;
                            btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                            btnSettings.ClientSideEvents.Click = "function(s, e){ cancelGrid(" + settings.Name + "); }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });

                });

            }).Bind(ViewData["Editable"] ?? GetEditing(c.Grid)).Render();
        });

        settings.Columns.Add(col =>
        {
            col.Width = Unit.Pixel(200);

            col.FieldName = "Ismi";
            col.SetEditItemTemplateContent(dEdit =>
            {
                Html.DevExpress().TextBox(lnkSettings =>
                {
                    lnkSettings.Name = col.FieldName;
                    lnkSettings.Width = Unit.Percentage(100);
                    lnkSettings.Text = Convert.ToString(DataBinder.Eval(dEdit.DataItem, col.FieldName));
                }).Render();
            });

            col.SetDataItemTemplateContent(dItem =>
            {
                Html.DevExpress().Button(lnkSettings =>
                {
                    var kolonFiltreDegeri = Convert.ToString(DataBinder.Eval(dItem.DataItem, "Ismi"));
                    var kolonFiltrelenecek = "Sorumlu"; // ViewCariSearch modeldeki isim
                    var cariAdedi = Convert.ToInt16(DataBinder.Eval(dItem.DataItem, "CariAdedi"));
                    var cariGoster = cariAdedi > 0
                        ? " <span class='cariDetay'>(" + cariAdedi.ToString() + " adet cari)</span>"
                        : " <i class='cariYok'>(cari yok)</i>";
                    var clickEvent = cariAdedi > 0 ? "function(){ ButtonCariDetayClick('" + kolonFiltrelenecek + "', '" + kolonFiltreDegeri + "'); }" : "function(){alert('kayitli bir cari yok')}";

                    lnkSettings.Name = "btn" + dItem.VisibleIndex;
                    lnkSettings.EncodeHtml = false;
                    lnkSettings.Styles.Style.CssClass = cariAdedi > 0 ? String.Empty : "noCursor";
                    lnkSettings.Text = kolonFiltreDegeri.ToString() + cariGoster;
                    lnkSettings.RenderMode = ButtonRenderMode.Link;
                    lnkSettings.ClientSideEvents.Click = clickEvent;
                }).Render();
            });

        });
        settings.Columns.Add(col => { col.FieldName = "Telefon"; });
        settings.Columns.Add(col => { col.FieldName = "Email"; });
        settings.Columns.Add(col => { col.FieldName = "Adres"; col.CellStyle.Wrap = DefaultBoolean.True; });

        // Common settings
        TravelInn.MVC.DevExpressWeb.Responsive.HelperClasses.DevExpressGridCommonSettings.Set(settings);

    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
