@functions{
    object GetEditingOdeme(ASPxGridView grid)
    {
        if (grid.IsNewRowEditing)
            return new TravelInn.Data.ViewModels.CariViewModel();// Bu model editte gosterilenle ayni olacak
        return grid.GetRow(grid.EditingRowVisibleIndex);
    }
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        bool isMobile = Request.Browser.IsMobileDevice;

        settings.Name = "GridViewOdeme";
        settings.CallbackRouteValues = new
        {
            Controller = "CariVeOdemeler",
            Action = "GridViewPartialOdeme"
        };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "CariVeOdemeler", Action = "GridViewPartialOdemeAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "CariVeOdemeler", Action = "GridViewPartialOdemeUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "CariVeOdemeler", Action = "GridViewPartialOdemeDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;

        settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;

        settings.SettingsBehavior.ConfirmDelete = true;

        settings.ClientSideEvents.BeginCallback = "function(s,e){gridOdeme_BeginCallback(s,e)}";
        settings.ClientSideEvents.RowDblClick = "function(s,e){ onShowLog(s,e) }";
        settings.ClientSideEvents.EndCallback = "function(s,e){ onGridOdemeEndCallback(s,e)}";

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Caption = " ";
        settings.CommandColumn.Width = 74;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.SetHeaderTemplateContent(c =>
        {
            if(!isMobile)
                ViewContext.Writer.Write(
            Html.DevExpress().Button(btn =>
            {
                btn.Name = "ExportOdeme";
                btn.Text = "";
                btn.ClientSideEvents.Click = "function(s,e){ OnExport(s,e)}";

                btn.RenderMode = ButtonRenderMode.Link;
                btn.Images.Image.IconID = "export_exporttoxls_16x16gray";
                btn.ImagePosition = ImagePosition.Right;
                btn.ToolTip = "Excele At";

            }).GetHtml()
            );
        });

        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;

        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = false;
        settings.SettingsPager.PageSize = Int32.MaxValue;
        settings.Settings.ShowGroupPanel = false;
        //settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = false;

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 300;
        settings.SettingsPopup.HeaderFilter.SettingsAdaptivity.MinHeight = 300;

        foreach (GridViewDataColumn column in settings.Columns)
            column.SettingsHeaderFilter.Mode = GridHeaderFilterMode.List;

        // GENISLIK ICIN ******************************************************
        settings.Width = System.Web.UI.WebControls.Unit.Pixel(630);
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        // ****************************************************** GENISLIK ICIN

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;


        settings.SetEditFormTemplateContent(c =>
        {
            Html.DevExpress().FormLayout(flSettings =>
            {
                flSettings.Name = "CariEditForm";
                flSettings.ColCount = 3;

                flSettings.Items.AddGroupItem(grp =>
                {
                    grp.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                    grp.ShowCaption = DefaultBoolean.False;
                    grp.ColCount = 3;
                    grp.ColSpan = 3;

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Aciklama";
                        grpItem.ColSpan = 3;

                        grpItem.NestedExtension().Memo(tbx =>
                        {
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            //settings.Height = System.Web.UI.WebControls.Unit.Pixel(400);
                        });
                    });

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Tarih";

                        grpItem.NestedExtension().DateEdit(tbx =>
                        {
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            tbx.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";
                        });
                    });

                });

                flSettings.Items.AddGroupItem(grp =>
                {
                    grp.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                    grp.ShowCaption = DefaultBoolean.False;
                    grp.ColCount = 3;
                    grp.ColSpan = 3;

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Dollar";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                        });
                    });

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Euro";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                        });
                    });

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "TL";

                        grpItem.NestedExtension().TextBox(tbx =>
                        {
                            tbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            tbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            tbx.ShowModelErrors = true;
                            tbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                        });
                    });
                });

                flSettings.Items.AddGroupItem(grp =>
                {
                    grp.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
                    grp.ShowCaption = DefaultBoolean.False;
                    grp.ColCount = 3;
                    grp.ColSpan = 3;

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.FieldName = "Banka_Idstr";
                        grpItem.Caption = "Banka";

                        grpItem.NestedExtension().ComboBox(cbx =>
                        {
                            cbx.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
                            cbx.Properties.ValidationSettings.Display = Display.Dynamic;
                            cbx.ShowModelErrors = true;
                            cbx.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            cbx.Properties.DropDownStyle = DropDownStyle.DropDown;
                            cbx.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                            cbx.Properties.TextField = "Banka_Adi";
                            cbx.Properties.ValueField = "Id";
                            cbx.Properties.ValueType = typeof(int);
                            cbx.Properties.DataSource = ViewBag.Banka;
                            cbx.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";
                        });
                    });

                });

                flSettings.Items.AddGroupItem(grp =>
                {
                    grp.GroupBoxDecoration = GroupBoxDecoration.None;
                    grp.Caption = "...";
                    grp.ColCount = 3;
                    grp.ColSpan = 3;

                    grp.Items.Add(grpItem =>
                    {
                        grpItem.ShowCaption = DefaultBoolean.False;
                    }).SetNestedContent(() =>
                    {
                        ViewContext.Writer.Write("<div style='float:right'>");
                        Html.DevExpress().Button(btnSettings =>
                        {
                            btnSettings.Name = "btnUpdate";
                            btnSettings.Text = "Guncelle";
                            btnSettings.RenderMode = ButtonRenderMode.Link;
                            btnSettings.ClientSideEvents.Click = "function(s, e){ updateGrid(" + settings.Name + "); }";
                        }).Render();
                        Html.DevExpress().Button(btnSettings =>
                        {
                            btnSettings.Name = "btnCancel";
                            btnSettings.Text = "Iptal";
                            btnSettings.RenderMode = ButtonRenderMode.Link;
                            btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                            btnSettings.ClientSideEvents.Click = "function(s, e){ cancelGrid(" + settings.Name + "); }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                });

            }).Bind(ViewData["EditableOdeme"] ?? GetEditingOdeme(c.Grid))
                .Render();
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Tarih";
            c.Caption = "Tarih";
            if(!isMobile) c.Width = 70;
            c.EditorProperties().DateEdit(p =>
            {

            });
        });

        settings.Columns.Add(col => { col.FieldName = "Aciklama"; col.CellStyle.Wrap = DefaultBoolean.True; if (!isMobile) col.Width = 160; });

        settings.Columns.Add(col =>
        {
            col.FieldName = "Dollar";
            col.SetHeaderCaptionTemplateContent(colHeader =>
            {
                Html.DevExpress().Image(
                    image =>
                    {
                        image.Name = "OdemeImageDollar";
                        image.Properties.EmptyImage.IconID = DevExpress.Web.ASPxThemes.IconID.IconbuilderBusinessDollarSvg16x16;
                    }).GetHtml();
            });


            if (!isMobile) col.Width = 70; col.PropertiesEdit.DisplayFormatString = "N";
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "Euro";
            col.SetHeaderCaptionTemplateContent(colHeader =>
            {
                Html.DevExpress().Image(
                    image =>
                    {
                        image.Name = "OdemeImageEuro";
                        image.Properties.EmptyImage.IconID = DevExpress.Web.ASPxThemes.IconID.IconbuilderBusinessEuroSvg16x16;
                    }).GetHtml();
            });

            if (!isMobile) col.Width = 70; col.PropertiesEdit.DisplayFormatString = "N";
        });

        settings.Columns.Add(col => { col.FieldName = "TL"; if (!isMobile) col.Width = 70; col.PropertiesEdit.DisplayFormatString = "N"; });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Banka_Idstr";
            c.Caption = "Banka";
            if (!isMobile) c.Width = 90;
            c.EditorProperties().ComboBox(p =>
            {
                p.DropDownStyle = DropDownStyle.DropDown;
                p.TextField = "Banka_Adi";
                p.ValueField = "Id";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.Banka;
            });
        });

        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Dollar").DisplayFormat = "<b>{0:N}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Euro").DisplayFormat = "<b>{0:N}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TL").DisplayFormat = "<b>{0:N}</b>";
        settings.Settings.ShowFooter = true;

    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
